# -*- coding: utf-8 -*-
"""functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15QW0X-dtuffXLvYIwRMyMiyd88ljNGlz

Functions
"""

def greet():
  print("hello world")
greet() #function used calling

# function  with parameter
def addition(n1,n2):
    print(n1+n2)

addition(12,23)

# Call by value - immutable data types are called by value
def increment(n):
    n += 1
    print('In function: '+str(n))

n=10
print('Before function: '+str(n))
increment(n)
print('After function: '+str(n))

# Call by reference - all mutable data type values are called by reference
def do(lst):
    lst.append(1234)
    print('In function:',lst)

lst = [1,2,3,4]
print('Before function:',lst)
do(lst)
print('After function:',lst)

def num(n1,n2):
  return(n1+n2)

print(num(1,2))

"""Types of Function Arguments:

Default Arguments
"""

def adds(n1,n2=90):
  return(n1+n2)

print(adds(10))
print(adds(10,10))

"""2.Keyword Arguments"""

def prints(age,name,addr):
  print(age,name,addr)

prints(21,'snehal','sarud')
prints(age=21,name='snehal',addr='sarud')
prints(name='snehal',age=21,addr='sarud')
prints(addr='sarud',age=21,name='snehal')

"""3.Positional Arguments"""

def prints(age,name):
    print(age,name)

prints(21,'snehal')
prints('snehal','22')

"""4.Arbitrary Arguments

i) args
"""

def sums(n1, *args):
    s=0
    for i in args:
        s += i
    print(s)

sums(1,2,3,4,5)
sums(1,2,3,4,5,4,5)
sums(1,2,3,4,5,4,5,6,7)
sums()

"""ii) kwargs"""

def info(**kwargs):
    print(kwargs)
    # for i in kwargs.items():
    #     print(i)
    print()

info(name='snehal')
info(name='snehal',age=21)
info(name='snehal',age=21,addr='sarud')

"""Docs String

"""

def adds(s1,s2):

    s = s1+s2
    return s

print(adds.__doc__)

"""Function within Function"""

def f1():
    print('Function 1 body..')
    def f2():
        print('Function 2 body..')
    f2()
    print('Function 1 body..')

f1()  # This will print both 'Function 1 body..' and 'Function 2 body..'

# Attempting to call f2() outside of f1() will result in an error
# f2()

"""Anonymous (lambda) Function"""

sqr = lambda x:x**2
print(sqr(10))

add = lambda x:x+2
print(add(7))

n,m = 10,20
print(n,m)

def func(n):
    a = 10
    global b
    b=12
    print(a,n,b)
    print(m)

print(n,m)
func(n)

"""Yeild vs return"""

# return
#return is used to exit a function and return a value to the caller. Only one value can be returned from a function when using return.

def fun1(n):
    for i in range(1,n):
        return i**2

print(fun1(5))

# yield
#yield is used to produce a series of values one at a time.

def fun2(n):
    for i in range(1,n):
        yield i**2

print(list(fun2(5)))